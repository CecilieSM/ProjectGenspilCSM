classDiagram

class UserList {
    list<User> Users
    GetUders(): list<User>
    AddUser(Password: string, Username: string): void
    RemoveUser(Username: string): void
}
note for UserList "Indeholder en liste over brugere."

class User {
    string Username
    string Password
    Role Role // enum
    User(Username: string, Password: string, Role: Role):
}
note for User "Bruges til at logge ind og administrere brugere.
Krav da vi har oplysinger på kunder (GPDR)."

class Role {
    <<enumeration>>
    Admin
    User
    Guest
}
note for Role "Brugerroller"

class Customer {
    -string CustomerID
    -string Name
    -string Address
    Customer(CustomerID: int, Name: string, Address: string):
    GetCustomerID(): int
    GetName(): string
    GetAddress(): string
    SetName(Name: string): void
    SetAddress(Address: string): void
    GetCustomerID(): int
    ToString(): string
}
note for Customer "Administrerer personlige oplysninger og spilkøb/reservationer."

class CustomerList {
    list<Customer> Customers
    GetCustomers(): list<Customer>
    AddCustomer(Customer: Customer): void
    UpdateCustomer(Customer: Customer): void
    RemoveCustomer(Customer: Customer): void
    GetCustomerByID(): Customer
    GenerateID(): int
}
note for CustomerList "Indeholder en liste over kunder."

class BoardGame {
    string GameID
    string Title
    Genre Genre //enum
    string Description
    Condition Condition //enum
    decimal Price
    int StockQuantity
    bool reperation
    BoardGame(GameID: string, Title: string, Description: string, Condition: Condition, Price: decimal, StockQuantity: int, reperation=false: bool):
    ToString(): string
}
note for BoardGame "Repræsenterer et brugt 
brætspil med tilstand 
og lager."

class BoardGameList {
    list<BoardGame> BoardGames
    GetBoardGames(): list<BoardGame>
    Add(BoardGame: BoardGame): void
    Update(BoardGame: BoardGame): void
    GetBoardGamesByGenre(genre: Genre): list<BoardGame>
    GetBoardGamesByTitle(title: string): list<BoardGame>
    GenerateID(): int
}

class StockQuantity {
    int Quantity
    BoardGameID BoardGameID
    StockQuantity(Quantity: int):
}

class reserved {
    DateTime ReservedDate
    int Quantity
    CustomerID CustomerID
    BoardGameID BoardGameID
    reserved(ReservedDate: DateTime, Quantity: int):
}
note for reserved "Hvornår et brætspil er 
reserveret. Og til hvem"

class Condition {
    <<enumeration>>
    New
    Good
    Used
    Damaged
}
note for Condition "Tilstande et brætspil kan
være i."

class Genre {
    <<enumeration>>
    Strategy
    Party
    Family
    Abstract
    Thematic
    Children
}
note for Genre "Brætspil genre"

CustomerList "1" *-- "*" Customer : Indeholder
Customer "*" -- "*" BoardGameList : Køber
Customer "1" *-- "*" reserved : Reserverer
BoardGameList "1" -- "*" BoardGame : Indeholder
BoardGame "1" *-- "*" reserved : Reserveres
BoardGame "1" -- "1" Condition : Har
BoardGame "1" -- "1" Genre : Har
Stock -- BoardGame : Har
UserList "1" *-- "*" User : Indeholder
User "1" -- "1" Role : Har 